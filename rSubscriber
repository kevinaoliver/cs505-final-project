#!/usr/bin/env python
import pika
import sys

# Set the connection parameters to connect to rabbit-server1 on port 5672
# on the / virtual host using the username "guest" and password "guest"
## ? - De we need to change values below?

#username = ''
#password = ''
username = 'guest'
password = 'guest'
hostname = ''
virtualhost = ''

## CREDENTIALS
## pika.credentials modules provides mechanism by which one passes username and password
## to the ConnectionParamters class when it is created

credentials = pika.PlainCredentials(username, password)

## CONNECTION PARAMETERS
## Two types of connection parameter classes in Pika to allow one to pass connection info
## into a a connection adapter - ConnectionParameters and URLParameters. Both classes 
## have same default connection values

parameters = pika.ConnectionParameters(hostname,
                                           5672,
                                           virtualhost,
                                           credentials)
                                           
## BLOCKING CONNECTION - deadlock avoidance?
## creates layer on top of Pika's asynchronous core providing methods that will block
## until their expected response has returned
## To prevent recursion/reentrancy, blocking connection and channel implementationss
## queue asynchronously delivered events received in nested ccontext
## dispatching them synchronously once nestin returns to desired context.

connection = pika.BlockingConnection(parameters)

## CHANNEL - Class that provides wrapper for interacting with RabbitMQ
## implementing methods and behaviours for an AMQP (Advanced Message Queuing Protocol) Channel

channel = connection.channel()

## .exchange_declare
## Method creates an exchange if it doesn't exist, verifies it is of the correct and expected class
## IF paassive set, server will reply with Declare - Ok if the exchange a lready exists iwth the same name
## reply code 404 (not found) if does not exist
##Parameters: exchange(str) - the exchange name consists of non-empty sequence of characters
## exchange_type  - the exchange type to use???

exchange_name = 'patient_data'
channel.exchange_declare(exchange=exchange_name, exchange_type='topic')

## .queue_declare - method creates of checks a queue
## Parameters: ' ' -Use and empty string as queue name for the broker to auto-generate one (broker creates a unique queue name)
## exclusive = True - Only allow acces by the current connection

result = channel.queue_declare('', exclusive=True)
queue_name = result.method.queue


binding_keys = "#"

if not binding_keys:
    sys.stderr.write("Usage: %s [binding_key]...\n" % sys.argv[0])
    sys.exit(1)
## .queue_bind - bind the queue to the specified exchange
## Parameters: exchange - source exchange to bind to
## queue(str) - queue to bind to the exchange
## routing_key(str) - routing key to bind on

for binding_key in binding_keys:
    channel.queue_bind(
        exchange=exchange_name, queue=queue_name, routing_key=binding_key)

print(' [*] Waiting for logs. To exit press CTRL+C')


def callback(ch, method, properties, body):
    print(" [x] %r:%r" % (method.routing_key, body))

## .basic_consume - send AMQP 0-9-1 command Basic.Cosume to the broker and bins messages
## for the consumer_tar to the consumer callback.
## If you do not pass in a consumer_tage, one will automatically be generated for you
## Parameters: queue (str) - The queue to consumer fomr. Use the empty string to specify the 
## most recent server-name queue for channel
## on_message_callback - Function to call when consuming with the signature
## auto_ack -  if se tot True, automatic acknowledgement mode will be used

channel.basic_consume(
    queue=queue_name, on_message_callback=callback, auto_ack=True)

## Only found docs related to BlockingConnection?
## Processes I/O events and dispatches timers and basic_consume callback suntil all consumers
## are cancelled
## NOTE: this blocking fcn may not be called from scope of a pika callback, because
## dispatching basic_consume callbacks from this context would consitute recursion.

channel.start_consuming()
